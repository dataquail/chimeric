name: Publish to npm

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (patch, minor, major, or specific version)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prepatch
          - preminor
          - premajor
          - prerelease
          - custom
      custom_version:
        description: 'Custom version if selected (e.g., 1.2.3)'
        required: false
        type: string
      tag:
        description: 'npm tag (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests and build
        run: |
          pnpm exec nx run-many --target=lint --projects=packages/*
          pnpm exec nx run-many --target=test --projects=packages/*
          pnpm exec nx run-many --target=build --projects=packages/*

      - name: Configure Git user
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Bump version
        id: version
        run: |
          cd packages
          VERSION_TYPE="${{ github.event.inputs.version }}"

          if [ "$VERSION_TYPE" = "custom" ]; then
            CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"
            if [ -z "$CUSTOM_VERSION" ]; then
              echo "No custom version provided. Exiting."
              exit 1
            fi
            VERSION_ARG="$CUSTOM_VERSION"
          else
            VERSION_ARG="$VERSION_TYPE"
          fi

          for pkg in */; do
            if [ -f "$pkg/package.json" ]; then
              echo "Bumping version for $pkg"
              cd $pkg
              npm version $VERSION_ARG --no-git-tag-version
              NEW_VERSION=$(node -p "require('./package.json').version")
              echo "Package $pkg new version: $NEW_VERSION"
              cd ..
            fi
          done

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push version changes and tag
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}"
          git tag v${{ steps.version.outputs.new_version }}
          git push origin main
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Publish to npm
        run: |
          for pkg in packages/*/; do
            if [ -f "$pkg/package.json" ]; then
              echo "Publishing $pkg"
              cd $pkg
              npm publish --access public --tag ${{ github.event.inputs.tag }}
              cd ../..
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
